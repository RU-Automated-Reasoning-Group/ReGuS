======== minigrid environment registered ===========
======== minigrid environment registered ===========
[ITER] 0
searching base on  C[1, 1]  WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
main branch cannot be entered and drop

trying to add  get_locked_door WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  get_locked_door WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 1 final 1.5
expand: put into queue and get cost 1 reward 0.0 for
  get_locked_door WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  LK_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  LK_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 1 final 1.5
expand: put into queue and get cost 1 reward 0.0 for
  LK_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  get_key WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  get_key WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 1 final 1.5
expand: put into queue and get cost 1 reward 0.0 for
  get_key WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  RC_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  RC_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 1 final 1.5
expand: put into queue and get cost 1 reward 0.0 for
  RC_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  DK_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  DK_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 1 final 1.5
expand: put into queue and get cost 1 reward 0.0 for
  DK_get WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  drop WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  return WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  C[1, 1]  WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 1 final 0.5
expand: put into queue and get cost 1 reward 0.0 for
  move WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 1
searching base on  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_ball C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_ball C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; put_near C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; put_near C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; RC_get C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; RC_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_key C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_key C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; LK_get C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; LK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; DK_get C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; DK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; get_locked_door C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right C[1, infty] ; END (False)
------ end current search -------

[ITER] 2
searching base on  turn_left WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  turn_left WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { move} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 8 for 
  turn_left WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 3
searching base on  put_near WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { toggle} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { toggle} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { toggle} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { pickup} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { pickup} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { pickup} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { get_locked_door} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { get_locked_door} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_locked_door} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { RC_get} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { RC_get} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { RC_get} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { DK_get} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { DK_get} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { DK_get} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; C[1, infty] ; END (False)
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { get_key} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_key} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_key} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { put_near} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { put_near} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { put_near} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { drop} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { drop} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { drop} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { move} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { LK_get} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { LK_get} ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { LK_get} ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 4
searching base on  toggle WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  toggle WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 5
searching base on  pickup WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  pickup WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 6
searching base on  drop WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  drop WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 7
searching base on  turn_right WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 8
searching base on  move WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False) with cost 0.5
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  move WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 2 final 2.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 2 final 1.0
expand: put into queue and get cost 2 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 9
searching base on  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup C[1, infty] ; END (False) with cost 1.0
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup turn_right C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup LK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_locked_door C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup pickup C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup put_near C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup put_near C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_key C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_key C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup move C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup DK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_ball C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup get_ball C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup RC_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; pickup C[1, infty] ; END (False)
------ end current search -------

[ITER] 10
searching base on  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle C[1, infty] ; END (False) with cost 1.0
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_locked_door C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle turn_right C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle move C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_ball C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_ball C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle LK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle put_near C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle put_near C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle RC_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle DK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle pickup C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_key C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; toggle get_key C[1, infty] ; END (False)
------ end current search -------

[ITER] 11
searching base on  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop C[1, infty] ; END (False) with cost 1.0
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop DK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_ball C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_ball C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop RC_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop put_near C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop put_near C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop pickup C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop move C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop turn_right C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_key C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_key C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop get_locked_door C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; drop LK_get C[1, infty] ; END (False)
------ end current search -------

[ITER] 12
searching base on  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left C[1, infty] ; END (False) with cost 1.0
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_locked_door C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left move C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_ball C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left DK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left LK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left turn_right C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left RC_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_key C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left get_key C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left pickup C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_left put_near C[1, infty] ; END (False)
------ end current search -------

[ITER] 13
searching base on  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move C[1, infty] ; END (False) with cost 1.0
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move LK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move turn_right C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move pickup C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move RC_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move DK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_key C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_key C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_locked_door C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move put_near C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move put_near C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_ball C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move get_ball C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move move C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; move C[1, infty] ; END (False)
------ end current search -------

[ITER] 14
searching base on  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right C[1, infty] ; END (False) with cost 1.0
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right LK_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right drop C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right turn_right C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right move C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right RC_get C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right toggle C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_ball C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_key C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_key C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right pickup C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right turn_left C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right put_near C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right get_locked_door C[1, infty] ; END (False)
trying to add  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  get_ball WHILE(not (front_is_ball)) { C[1, infty] } ; turn_right DK_get C[1, infty] ; END (False)
------ end current search -------

[ITER] 15
searching base on  turn_left WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  turn_left WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { pickup move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 8 for 
  turn_left WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 16
searching base on  turn_left WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  turn_left WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  turn_left WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 17
searching base on  turn_left WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  turn_left WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 6 for 
  turn_left WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 18
searching base on  turn_left WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 8 for 
  turn_left WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { drop move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  turn_left WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 19
searching base on  turn_left WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
should not get here for while finish
[ITER] 20
searching base on  turn_left WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { toggle move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle move} ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 8 for 
  turn_left WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  turn_left WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 21
searching base on  turn_left WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_left WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_left WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  turn_left WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_left WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_left WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 22
searching base on  put_near WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  put_near WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
get reward
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { turn_right pickup} ; C[1, infty] ; END (False)
get reward
1 with reward 1.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 1.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 1.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 1.0
38 with reward 1.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 success and store for  put_near WHILE(not (front_is_ball)) { turn_right pickup} ; C[1, infty] ; END (False)
equeued reward 1.0 cost 3 final 0.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right pickup} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { turn_right turn_right} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { turn_right turn_right} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right turn_right} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  put_near WHILE(not (front_is_ball)) { turn_right turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_right turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 23
searching base on  put_near WHILE(not (front_is_ball)) { turn_right pickup} ; C[1, infty] ; END (False) with cost 0.5
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
seed 1 failed

found but not success in all seeds for 
  put_near WHILE(not (front_is_ball)) { turn_right pickup} ; C[1, infty] ; END (False)
location 1
seed 1 failed
[ITER] 24
searching base on  put_near WHILE(not (front_is_ball)) { get_ball} ; C[1, infty] ; END (False) with cost 1.0
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; RC_get C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; get_ball C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; get_ball C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; turn_left C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; turn_left C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; move C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; move C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; get_key C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; get_key C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
get reward
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

found but not success in all seeds with reward 0.9 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
switch to robot seed 1
equeued reward 0.9 cost 3 final 0.6
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; toggle C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; toggle C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; LK_get C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; turn_right C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; turn_right C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; put_near C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; put_near C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; DK_get C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; get_locked_door C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; drop C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; drop C[1, infty] ; END (False)
------ end current search -------

[ITER] 25
searching base on  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False) with cost 0.6
lst: [0]
lst: [0]
trying to add  IF(right_is_clear) { move C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.28 cost 4 final 1.72
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { move C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { turn_left C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.28 cost 4 final 1.72
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { turn_left C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { turn_right C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.28 cost 4 final 1.72
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { turn_right C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.28 for
  IF(right_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.9 for
  IF(right_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(right_is_clear) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { toggle C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.28 cost 4 final 1.72
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { toggle C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  IF(right_is_clear) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(right_is_clear) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { pickup C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.28 cost 4 final 1.72
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { pickup C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(right_is_clear) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(right_is_clear) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { drop C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.28 cost 4 final 1.72
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { drop C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { get_ball C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.28 cost 4 final 1.72
add if: put into queue and get cost 4 reward 0.9 for
  IF(right_is_clear) { get_ball C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
merge 0
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward 0.88 cost 3 final 0.62
case one applied: put into queue and get cost 3 reward 0.9 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(right_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.28 for
  IF(right_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.9 for
  IF(right_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
lst: [0]
lst: [0]
trying to add  IF(not (left_is_clear)) { move C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { move C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { turn_left C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { turn_left C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { turn_right C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { turn_right C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(not (left_is_clear)) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.9 for
  IF(not (left_is_clear)) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (left_is_clear)) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { toggle C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { toggle C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 33 for 
  IF(not (left_is_clear)) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (left_is_clear)) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { pickup C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { pickup C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (left_is_clear)) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (left_is_clear)) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { drop C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { drop C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { get_ball C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.9 for
  IF(not (left_is_clear)) { get_ball C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (left_is_clear)) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(not (left_is_clear)) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.9 for
  IF(not (left_is_clear)) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
lst: [0]
lst: [0]
trying to add  IF(front_is_clear) { move C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.22 cost 4 final 1.78
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { move C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { turn_left C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.22 cost 4 final 1.78
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { turn_left C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { turn_right C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.22 cost 4 final 1.78
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { turn_right C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.22 for
  IF(front_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.9 for
  IF(front_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { RC_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { toggle C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.22 cost 4 final 1.78
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { toggle C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 20 for 
  IF(front_is_clear) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { get_key C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { get_locked_door C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { pickup C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.22 cost 4 final 1.78
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { pickup C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { LK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { DK_get C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { drop C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.22 cost 4 final 1.78
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { drop C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { get_ball C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.22 cost 4 final 1.78
add if: put into queue and get cost 4 reward 0.9 for
  IF(front_is_clear) { get_ball C[1, infty] }  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.22 for
  IF(front_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.9 for
  IF(front_is_clear) { return}  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  IF(not (right_is_clear)) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 0.0
9 with reward 1.0
10 with reward 1.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 1.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.28 for
  IF(not (right_is_clear)) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward 0.28 cost 3 final 1.22
case 3: put into queue and get cost 3 reward 0.9 for
  IF(not (right_is_clear)) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward 0.6 cost 3 final 0.9
case 3: put into queue and get cost 3 reward 0.9 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_clear)) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 1.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 1.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 1.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 1.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.22 for
  IF(not (front_is_clear)) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward 0.22 cost 3 final 1.28
case 3: put into queue and get cost 3 reward 0.9 for
  IF(not (front_is_clear)) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
[ITER] 26
searching base on  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False) with cost 0.62
lst: [2]
lst: [2]
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { move C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.88 cost 4 final 1.12
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { move C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.88 cost 4 final 1.12
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.88 cost 4 final 1.12
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { return}  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.88 cost 4 final 1.12
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
merge 0
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
equeued reward 0.88 cost 3 final 0.62
case one applied: put into queue and get cost 3 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.88 cost 4 final 1.12
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.88 cost 4 final 1.12
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.88 cost 4 final 1.12
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(has_key) { return}  pickup C[1, infty] ; END (False)
lst: [2]
lst: [2]
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { move C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.76 cost 4 final 1.24
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { move C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.76 cost 4 final 1.24
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.76 cost 4 final 1.24
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.76 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { return}  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.76 cost 4 final 1.24
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0
equeued reward 0.76 cost 4 final 1.24
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 0.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 0.0
30 with reward 1.0
31 with reward 1.0
32 with reward 0.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 0.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.76 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; IF(left_is_clear) { return}  pickup C[1, infty] ; END (False)
[ITER] 27
searching base on  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False) with cost 0.62
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup turn_left C[1, infty] ; END (False)
equeued reward 0.88 cost 4 final 1.12
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup turn_left C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup move C[1, infty] ; END (False)
equeued reward 0.88 cost 4 final 1.12
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup move C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup RC_get C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup RC_get C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup toggle C[1, infty] ; END (False)
equeued reward 0.88 cost 4 final 1.12
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup toggle C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_key C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_key C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup LK_get C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup LK_get C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup drop C[1, infty] ; END (False)
equeued reward 0.0 cost 4 final 2.0
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup drop C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup return; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0
unable to put into queue and get cost None reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_ball C[1, infty] ; END (False)
equeued reward 0.88 cost 4 final 1.12
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_ball C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup put_near C[1, infty] ; END (False)
equeued reward 0.88 cost 4 final 1.12
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup put_near C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup pickup C[1, infty] ; END (False)
equeued reward 0.88 cost 4 final 1.12
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 special complete with reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup turn_right C[1, infty] ; END (False)
equeued reward 0.88 cost 4 final 1.12
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup turn_right C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup get_locked_door C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 0.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup DK_get C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.88 for
  put_near WHILE(not (front_is_ball)) { get_ball} ; pickup DK_get C[1, infty] ; END (False)
------ end current search -------

[ITER] 28
searching base on  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False) with cost 0.9
lst: [0, 1]
lst: [0, 1]
trying to add  IF(not (front_is_ball)) { move C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 4 final 2.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { move C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { turn_left C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 4 final 2.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { turn_left C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { turn_right C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 4 final 2.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { turn_right C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  IF(not (front_is_ball)) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(not (front_is_ball)) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { RC_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (front_is_ball)) { RC_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { RC_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { toggle C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 4 final 2.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { toggle C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { get_key C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  IF(not (front_is_ball)) { get_key C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { get_key C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { get_locked_door C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (front_is_ball)) { get_locked_door C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { get_locked_door C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
merge 0
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward 0.6 cost 3 final 0.9
case one applied: put into queue and get cost 3 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { LK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (front_is_ball)) { LK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { LK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { DK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  IF(not (front_is_ball)) { DK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { DK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { drop C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 4 final 2.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { drop C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { get_ball C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 4 final 2.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { get_ball C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { put_near C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 4 final 2.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(not (front_is_ball)) { put_near C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(not (front_is_ball)) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  IF(not (front_is_ball)) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(not (front_is_ball)) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { move C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { move C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { return}  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 33 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(not (front_is_ball)) { return}  pickup C[1, infty] ; END (False)
lst: [0, 1]
lst: [0, 1]
trying to add  IF(front_is_clear) { move C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.14 cost 4 final 1.8599999999999999
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { move C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { turn_left C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.14 cost 4 final 1.8599999999999999
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { turn_left C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { turn_right C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.14 cost 4 final 1.8599999999999999
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { turn_right C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.14 for
  IF(front_is_clear) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(front_is_clear) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { RC_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { RC_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { RC_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { toggle C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.14 cost 4 final 1.8599999999999999
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { toggle C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { get_key C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 20 for 
  IF(front_is_clear) { get_key C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { get_key C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { get_locked_door C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { get_locked_door C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { get_locked_door C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { LK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { LK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { LK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { DK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(front_is_clear) { DK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { DK_get C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { drop C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.14 cost 4 final 1.8599999999999999
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { drop C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { get_ball C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.14 cost 4 final 1.8599999999999999
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { get_ball C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { put_near C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.14 cost 4 final 1.8599999999999999
add if: put into queue and get cost 4 reward 0.6 for
  IF(front_is_clear) { put_near C[1, infty] }  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(front_is_clear) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 1.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 0.0
25 with reward 1.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 1.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.14 for
  IF(front_is_clear) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(front_is_clear) { return}  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { move C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { move C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { turn_left C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { turn_right C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { return}  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { RC_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { toggle C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 33 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_key C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_locked_door C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { LK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { DK_get C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { drop C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { get_ball C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
equeued reward 0.6 cost 4 final 1.4
add if: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { put_near C[1, infty] }  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { return}  pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { return}  pickup C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  IF(front_is_clear) { return}  pickup C[1, infty] ; END (False)
[ITER] 29
searching base on  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False) with cost 0.9
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup RC_get C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup RC_get C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup drop C[1, infty] ; END (False)
equeued reward 0.0 cost 4 final 2.0
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup drop C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_locked_door C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup turn_left C[1, infty] ; END (False)
equeued reward 0.6 cost 4 final 1.4
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup turn_left C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 18 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_key C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_key C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup DK_get C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup DK_get C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup toggle C[1, infty] ; END (False)
equeued reward 0.6 cost 4 final 1.4
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup toggle C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup return; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0
unable to put into queue and get cost None reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup pickup C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup pickup C[1, infty] ; END (False)
equeued reward 0.6 cost 4 final 1.4
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup pickup C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup turn_right C[1, infty] ; END (False)
equeued reward 0.6 cost 4 final 1.4
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup turn_right C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup put_near C[1, infty] ; END (False)
equeued reward 0.6 cost 4 final 1.4
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup put_near C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup move C[1, infty] ; END (False)
equeued reward 0.6 cost 4 final 1.4
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup move C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 special complete with reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_ball C[1, infty] ; END (False)
equeued reward 0.6 cost 4 final 1.4
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup get_ball C[1, infty] ; END (False)
trying to add  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 1.0
3 with reward 0.0
4 with reward 0.0
5 with reward 1.0
6 with reward 0.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 1.0
18 with reward 0.0
19 with reward 0.0
20 with reward 1.0
21 with reward 0.0
22 with reward 0.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 0.0
28 with reward 1.0
29 with reward 1.0
30 with reward 0.0
31 with reward 1.0
32 with reward 1.0
33 with reward 0.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 0.0
38 with reward 0.0
39 with reward 1.0
40 with reward 0.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 0.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 0.0
49 with reward 1.0

 no fuel with reward 0.0 under seed 1 for 
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup LK_get C[1, infty] ; END (False)
equeued reward -1 cost 4 final 3.0
expand: put into queue and get cost 4 reward 0.6 for
  IF(left_is_clear) { put_near WHILE(not (front_is_ball)) { get_ball} ;}  pickup LK_get C[1, infty] ; END (False)
------ end current search -------

[ITER] 30
searching base on  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False) with cost 1.0
lst: [0]
lst: [0]
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { move C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { move C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
merge 0
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
equeued reward 0.0 cost 2 final 1.0
case one applied: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { turn_right C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { turn_right C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { return}  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { return}  turn_left} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { return}  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { toggle C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { toggle C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 18 for 
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { pickup C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { pickup C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { drop C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { drop C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_ball C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { get_ball C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { put_near C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { put_near C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { return}  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { return}  turn_left} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(not (left_is_clear)) { return}  turn_left} ; C[1, infty] ; END (False)
lst: [0]
lst: [0]
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { move C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { move C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { turn_right C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { turn_right C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { return}  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { return}  turn_left} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { return}  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { toggle C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { toggle C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 3 for 
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { pickup C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { pickup C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { drop C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { drop C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_ball C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { get_ball C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { put_near C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { put_near C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { return}  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { return}  turn_left} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(right_is_clear) { return}  turn_left} ; C[1, infty] ; END (False)
[ITER] 31
searching base on  toggle WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  toggle WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 32
searching base on  toggle WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  toggle WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 33
searching base on  toggle WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 8 for 
  toggle WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  toggle WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 34
searching base on  toggle WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  toggle WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 35
searching base on  toggle WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  toggle WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 36
searching base on  toggle WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
should not get here for while finish
[ITER] 37
searching base on  toggle WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  toggle WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 38
searching base on  toggle WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  toggle WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  toggle WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  toggle WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  toggle WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  toggle WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  toggle WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  toggle WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  toggle WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 39
searching base on  pickup WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  pickup WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 8 for 
  pickup WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 40
searching base on  pickup WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  pickup WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  pickup WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 41
searching base on  pickup WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  pickup WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 42
searching base on  pickup WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 43
searching base on  pickup WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  pickup WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 44
searching base on  pickup WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  pickup WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 45
searching base on  pickup WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  pickup WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  pickup WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  pickup WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  pickup WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  pickup WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
trying to add  pickup WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  pickup WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  pickup WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 46
searching base on  pickup WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
should not get here for while finish
[ITER] 47
searching base on  drop WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  drop WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 48
searching base on  drop WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 49
searching base on  drop WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  drop WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  drop WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 8 for 
  drop WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 50
searching base on  drop WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  drop WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  drop WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  drop WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 51
searching base on  drop WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  drop WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 52
searching base on  drop WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
should not get here for while finish
[ITER] 53
searching base on  drop WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  drop WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 54
searching base on  drop WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  drop WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  drop WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  drop WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  drop WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  drop WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  drop WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  drop WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  drop WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 55
searching base on  turn_right WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 56
searching base on  turn_right WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  turn_right WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 6 for 
  turn_right WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { turn_right move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 57
searching base on  turn_right WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
should not get here for while finish
[ITER] 58
searching base on  turn_right WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  turn_right WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 59
searching base on  turn_right WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 60
searching base on  turn_right WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  turn_right WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 61
searching base on  turn_right WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 62
searching base on  turn_right WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  turn_right WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  turn_right WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  turn_right WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  turn_right WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  turn_right WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  turn_right WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 63
searching base on  move WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  move WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { move return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { move RC_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 64
searching base on  move WHILE(not (front_is_ball)) { put_near C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
should not get here for while finish
[ITER] 65
searching base on  move WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 13 for 
  move WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left move} ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  move WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_left get_ball C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 66
searching base on  move WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 4 for 
  move WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { turn_right turn_right C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 67
searching base on  move WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
trying to add  move WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball RC_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball DK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball turn_left} ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  move WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball put_near C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball LK_get C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball toggle C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball turn_right} ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  move WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball get_ball C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball drop C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { get_ball get_key C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 68
searching base on  move WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop pickup C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { drop return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  move WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop turn_right C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { drop get_ball C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 69
searching base on  move WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle DK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle move C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  move WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { toggle turn_right C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 70
searching base on  move WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False) with cost 1.0
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup toggle C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 20 for 
  move WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup get_key C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 1 for 
  move WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup get_locked_door C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup drop C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup LK_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup turn_right C[1, infty] } ; C[1, infty] ; END (False)
trying to add  move WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup return} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup RC_get C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup get_ball C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup move C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup turn_left C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup put_near C[1, infty] } ; C[1, infty] ; END (False)
<class 'numpy.ndarray'> <class 'tuple'>
trying to add  move WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  move WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  move WHILE(not (front_is_ball)) { pickup DK_get C[1, infty] } ; C[1, infty] ; END (False)
------ end current search -------

[ITER] 71
searching base on  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False) with cost 1.0
lst: [0]
lst: [0]
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { move C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { move C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
merge 0
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
equeued reward 0.0 cost 2 final 1.0
case one applied: put into queue and get cost 2 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { turn_right C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { turn_right C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { return}  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { return}  turn_left} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { return}  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { RC_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { toggle C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { toggle C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_key C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_locked_door C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { pickup C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { pickup C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { LK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { DK_get C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { drop C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
equeued reward 0.0 cost 3 final 1.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { drop C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_ball C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_ball C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { get_ball C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { put_near C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { put_near C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
add if: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { put_near C[1, infty] }  turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { return}  turn_left} ; C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { return}  turn_left} ; C[1, infty] ; END (False)
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { IF(front_is_key) { return}  turn_left} ; C[1, infty] ; END (False)
[ITER] 72
searching base on  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False) with cost 1.0
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; get_ball C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { turn_left} ; get_ball C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; get_ball C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; pickup C[1, infty] ; END (False)
get reward
1 with reward 1.0
2 with reward 1.0
3 with reward 1.0
4 with reward 1.0
5 with reward 1.0
6 with reward 1.0
7 with reward 1.0
8 with reward 1.0
9 with reward 1.0
10 with reward 1.0
11 with reward 1.0
12 with reward 1.0
13 with reward 1.0
14 with reward 1.0
15 with reward 1.0
16 with reward 1.0
17 with reward 1.0
18 with reward 1.0
19 with reward 1.0
20 with reward 1.0
21 with reward 1.0
22 with reward 1.0
23 with reward 1.0
24 with reward 1.0
25 with reward 1.0
26 with reward 1.0
27 with reward 1.0
28 with reward 1.0
29 with reward 1.0
30 with reward 1.0
31 with reward 1.0
32 with reward 1.0
33 with reward 1.0
34 with reward 1.0
35 with reward 1.0
36 with reward 1.0
37 with reward 1.0
38 with reward 1.0
39 with reward 1.0
40 with reward 1.0
41 with reward 1.0
42 with reward 1.0
43 with reward 1.0
44 with reward 1.0
45 with reward 1.0
46 with reward 1.0
47 with reward 1.0
48 with reward 1.0
49 with reward 1.0

 success and store for  put_near WHILE(not (front_is_ball)) { turn_left} ; pickup C[1, infty] ; END (False)
equeued reward 1.0 cost 3 final 0.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; pickup C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; get_locked_door C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_left} ; get_locked_door C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; get_locked_door C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; get_key C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; get_key C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; get_key C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; drop C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; drop C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; drop C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; put_near C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 32 for 
  put_near WHILE(not (front_is_ball)) { turn_left} ; put_near C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; put_near C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; move C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; move C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; move C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; return; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0
unable to put into queue and get cost None reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; toggle C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; toggle C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; toggle C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; turn_left C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; turn_left C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; turn_left C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; LK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_left} ; LK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; LK_get C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; DK_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_left} ; DK_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; DK_get C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; turn_right C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 special complete with reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; turn_right C[1, infty] ; END (False)
equeued reward 0.0 cost 3 final 1.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; turn_right C[1, infty] ; END (False)
trying to add  put_near WHILE(not (front_is_ball)) { turn_left} ; RC_get C[1, infty] ; END (False)
1 with reward 0.0
2 with reward 0.0
3 with reward 0.0
4 with reward 0.0
5 with reward 0.0
6 with reward 0.0
7 with reward 0.0
8 with reward 0.0
9 with reward 0.0
10 with reward 0.0
11 with reward 0.0
12 with reward 0.0
13 with reward 0.0
14 with reward 0.0
15 with reward 0.0
16 with reward 0.0
17 with reward 0.0
18 with reward 0.0
19 with reward 0.0
20 with reward 0.0
21 with reward 0.0
22 with reward 0.0
23 with reward 0.0
24 with reward 0.0
25 with reward 0.0
26 with reward 0.0
27 with reward 0.0
28 with reward 0.0
29 with reward 0.0
30 with reward 0.0
31 with reward 0.0
32 with reward 0.0
33 with reward 0.0
34 with reward 0.0
35 with reward 0.0
36 with reward 0.0
37 with reward 0.0
38 with reward 0.0
39 with reward 0.0
40 with reward 0.0
41 with reward 0.0
42 with reward 0.0
43 with reward 0.0
44 with reward 0.0
45 with reward 0.0
46 with reward 0.0
47 with reward 0.0
48 with reward 0.0
49 with reward 0.0

 no fuel with reward 0.0 under seed 2 for 
  put_near WHILE(not (front_is_ball)) { turn_left} ; RC_get C[1, infty] ; END (False)
equeued reward -1 cost 3 final 2.5
expand: put into queue and get cost 3 reward 0.0 for
  put_near WHILE(not (front_is_ball)) { turn_left} ; RC_get C[1, infty] ; END (False)
------ end current search -------

[ITER] 73
searching base on  put_near WHILE(not (front_is_ball)) { turn_left} ; pickup C[1, infty] ; END (False) with cost 0.5
get reward
seed 1 passed
get reward
seed 2 passed
get reward
seed 3 passed
get reward
seed 4 passed
get reward
seed 5 passed
get reward
seed 6 passed
get reward
seed 7 passed
get reward
seed 8 passed
get reward
seed 9 passed
get reward
seed 10 passed
get reward
seed 11 passed
get reward
seed 12 passed
get reward
seed 13 passed
get reward
seed 14 passed
get reward
seed 15 passed
get reward
seed 16 passed
get reward
seed 17 passed
get reward
seed 18 passed
get reward
seed 19 passed
get reward
seed 20 passed
get reward
seed 21 passed
get reward
seed 22 passed
get reward
seed 23 passed
get reward
seed 24 passed
get reward
seed 25 passed
get reward
seed 26 passed
get reward
seed 27 passed
get reward
seed 28 passed
get reward
seed 29 passed
get reward
seed 30 passed
get reward
seed 31 passed
get reward
seed 32 passed
get reward
seed 33 passed
get reward
seed 34 passed
get reward
seed 35 passed
get reward
seed 36 passed
get reward
seed 37 passed
get reward
seed 38 passed
get reward
seed 39 passed
get reward
seed 40 passed
get reward
seed 41 passed
get reward
seed 42 passed
get reward
seed 43 passed
get reward
seed 44 passed
get reward
seed 45 passed
get reward
seed 46 passed
get reward
seed 47 passed
get reward
seed 48 passed
get reward
seed 49 passed
get reward
seed 50 passed
get reward
seed 51 passed
get reward
seed 52 passed
get reward
seed 53 passed
get reward
seed 54 passed
get reward
seed 55 passed
get reward
seed 56 passed
get reward
seed 57 passed
get reward
seed 58 passed
get reward
seed 59 passed
get reward
seed 60 passed
get reward
seed 61 passed
get reward
seed 62 passed
get reward
seed 63 passed
get reward
seed 64 passed
get reward
seed 65 passed
get reward
seed 66 passed
get reward
seed 67 passed
get reward
seed 68 passed
get reward
seed 69 passed
get reward
seed 70 passed
get reward
seed 71 passed
get reward
seed 72 passed
get reward
seed 73 passed
get reward
seed 74 passed
get reward
seed 75 passed
get reward
seed 76 passed
get reward
seed 77 passed
get reward
seed 78 passed
get reward
seed 79 passed
get reward
seed 80 passed
get reward
seed 81 passed
get reward
seed 82 passed
get reward
seed 83 passed
get reward
seed 84 passed
get reward
seed 85 passed
get reward
seed 86 passed
get reward
seed 87 passed
get reward
seed 88 passed
get reward
seed 89 passed
get reward
seed 90 passed
get reward
seed 91 passed
get reward
seed 92 passed
get reward
seed 93 passed
get reward
seed 94 passed
get reward
seed 95 passed
get reward
seed 96 passed
get reward
seed 97 passed
get reward
seed 98 passed
get reward
seed 99 passed
get reward
seed 100 passed
get reward
seed 101 passed
get reward
seed 102 passed
get reward
seed 103 passed
get reward
seed 104 passed
get reward
seed 105 passed
get reward
seed 106 passed
get reward
seed 107 passed
get reward
seed 108 passed
get reward
seed 109 passed
get reward
seed 110 passed
get reward
seed 111 passed
get reward
seed 112 passed
get reward
seed 113 passed
get reward
seed 114 passed
get reward
seed 115 passed
get reward
seed 116 passed
get reward
seed 117 passed
get reward
seed 118 passed
get reward
seed 119 passed
get reward
seed 120 passed
get reward
seed 121 passed
get reward
seed 122 passed
get reward
seed 123 passed
get reward
seed 124 passed
get reward
seed 125 passed
get reward
seed 126 passed
get reward
seed 127 passed
get reward
seed 128 passed
get reward
seed 129 passed
get reward
seed 130 passed
get reward
seed 131 passed
get reward
seed 132 passed
get reward
seed 133 passed
get reward
seed 134 passed
get reward
seed 135 passed
get reward
seed 136 passed
get reward
seed 137 passed
get reward
seed 138 passed
get reward
seed 139 passed
get reward
seed 140 passed
get reward
seed 141 passed
get reward
seed 142 passed
get reward
seed 143 passed
get reward
seed 144 passed
get reward
seed 145 passed
get reward
seed 146 passed
get reward
seed 147 passed
get reward
seed 148 passed
get reward
seed 149 passed
get reward
seed 150 passed
get reward
seed 151 passed
get reward
seed 152 passed
get reward
seed 153 passed
get reward
seed 154 passed
get reward
seed 155 passed
get reward
seed 156 passed
get reward
seed 157 passed
get reward
seed 158 passed
get reward
seed 159 passed
get reward
seed 160 passed
get reward
seed 161 passed
get reward
seed 162 passed
get reward
seed 163 passed
get reward
seed 164 passed
get reward
seed 165 passed
get reward
seed 166 passed
get reward
seed 167 passed
get reward
seed 168 passed
get reward
seed 169 passed
get reward
seed 170 passed
get reward
seed 171 passed
get reward
seed 172 passed
get reward
seed 173 passed
get reward
seed 174 passed
get reward
seed 175 passed
get reward
seed 176 passed
get reward
seed 177 passed
get reward
seed 178 passed
get reward
seed 179 passed
get reward
seed 180 passed
get reward
seed 181 passed
get reward
seed 182 passed
get reward
seed 183 passed
get reward
seed 184 passed
get reward
seed 185 passed
get reward
seed 186 passed
get reward
seed 187 passed
get reward
seed 188 passed
get reward
seed 189 passed
get reward
seed 190 passed
get reward
seed 191 passed
get reward
seed 192 passed
get reward
seed 193 passed
get reward
seed 194 passed
get reward
seed 195 passed
get reward
seed 196 passed
get reward
seed 197 passed
get reward
seed 198 passed
get reward
seed 199 passed
get reward
seed 200 passed
get reward
seed 201 passed
get reward
seed 202 passed
get reward
seed 203 passed
get reward
seed 204 passed
get reward
seed 205 passed
get reward
seed 206 passed
get reward
seed 207 passed
get reward
seed 208 passed
get reward
seed 209 passed
get reward
seed 210 passed
get reward
seed 211 passed
get reward
seed 212 passed
get reward
seed 213 passed
get reward
seed 214 passed
get reward
seed 215 passed
get reward
seed 216 passed
get reward
seed 217 passed
get reward
seed 218 passed
get reward
seed 219 passed
get reward
seed 220 passed
get reward
seed 221 passed
get reward
seed 222 passed
get reward
seed 223 passed
get reward
seed 224 passed
get reward
seed 225 passed
get reward
seed 226 passed
get reward
seed 227 passed
get reward
seed 228 passed
get reward
seed 229 passed
get reward
seed 230 passed
get reward
seed 231 passed
get reward
seed 232 passed
get reward
seed 233 passed
get reward
seed 234 passed
get reward
seed 235 passed
get reward
seed 236 passed
get reward
seed 237 passed
get reward
seed 238 passed
get reward
seed 239 passed
get reward
seed 240 passed
get reward
seed 241 passed
get reward
seed 242 passed
get reward
seed 243 passed
get reward
seed 244 passed
get reward
seed 245 passed
get reward
seed 246 passed
get reward
seed 247 passed
get reward
seed 248 passed
get reward
seed 249 passed
get reward
seed 250 passed
get reward
seed 251 passed
get reward
seed 252 passed
get reward
seed 253 passed
get reward
seed 254 passed
get reward
seed 255 passed
get reward
seed 256 passed
get reward
seed 257 passed
get reward
seed 258 passed
get reward
seed 259 passed
get reward
seed 260 passed
get reward
seed 261 passed
get reward
seed 262 passed
get reward
seed 263 passed
get reward
seed 264 passed
get reward
seed 265 passed
get reward
seed 266 passed
get reward
seed 267 passed
get reward
seed 268 passed
get reward
seed 269 passed
get reward
seed 270 passed
get reward
seed 271 passed
get reward
seed 272 passed
get reward
seed 273 passed
get reward
seed 274 passed
get reward
seed 275 passed
get reward
seed 276 passed
get reward
seed 277 passed
get reward
seed 278 passed
get reward
seed 279 passed
get reward
seed 280 passed
get reward
seed 281 passed
get reward
seed 282 passed
get reward
seed 283 passed
get reward
seed 284 passed
get reward
seed 285 passed
get reward
seed 286 passed
get reward
seed 287 passed
get reward
seed 288 passed
get reward
seed 289 passed
get reward
seed 290 passed
get reward
seed 291 passed
get reward
seed 292 passed
get reward
seed 293 passed
get reward
seed 294 passed
get reward
seed 295 passed
get reward
seed 296 passed
get reward
seed 297 passed
get reward
seed 298 passed
get reward
seed 299 passed
get reward
seed 300 passed
get reward
seed 301 passed
get reward
seed 302 passed
get reward
seed 303 passed
get reward
seed 304 passed
get reward
seed 305 passed
get reward
seed 306 passed
get reward
seed 307 passed
get reward
seed 308 passed
get reward
seed 309 passed
get reward
seed 310 passed
get reward
seed 311 passed
get reward
seed 312 passed
get reward
seed 313 passed
get reward
seed 314 passed
get reward
seed 315 passed
get reward
seed 316 passed
get reward
seed 317 passed
get reward
seed 318 passed
get reward
seed 319 passed
get reward
seed 320 passed
get reward
seed 321 passed
get reward
seed 322 passed
get reward
seed 323 passed
get reward
seed 324 passed
get reward
seed 325 passed
get reward
seed 326 passed
get reward
seed 327 passed
get reward
seed 328 passed
get reward
seed 329 passed
get reward
seed 330 passed
get reward
seed 331 passed
get reward
seed 332 passed
get reward
seed 333 passed
get reward
seed 334 passed
get reward
seed 335 passed
get reward
seed 336 passed
get reward
seed 337 passed
get reward
seed 338 passed
get reward
seed 339 passed
get reward
seed 340 passed
get reward
seed 341 passed
get reward
seed 342 passed
get reward
seed 343 passed
get reward
seed 344 passed
get reward
seed 345 passed
get reward
seed 346 passed
get reward
seed 347 passed
get reward
seed 348 passed
get reward
seed 349 passed
get reward
seed 350 passed
get reward
seed 351 passed
get reward
seed 352 passed
get reward
seed 353 passed
get reward
seed 354 passed
get reward
seed 355 passed
get reward
seed 356 passed
get reward
seed 357 passed
get reward
seed 358 passed
get reward
seed 359 passed
get reward
seed 360 passed
get reward
seed 361 passed
get reward
seed 362 passed
get reward
seed 363 passed
get reward
seed 364 passed
get reward
seed 365 passed
get reward
seed 366 passed
get reward
seed 367 passed
get reward
seed 368 passed
get reward
seed 369 passed
get reward
seed 370 passed
get reward
seed 371 passed
get reward
seed 372 passed
get reward
seed 373 passed
get reward
seed 374 passed
get reward
seed 375 passed
get reward
seed 376 passed
get reward
seed 377 passed
get reward
seed 378 passed
get reward
seed 379 passed
get reward
seed 380 passed
get reward
seed 381 passed
get reward
seed 382 passed
get reward
seed 383 passed
get reward
seed 384 passed
get reward
seed 385 passed
get reward
seed 386 passed
get reward
seed 387 passed
get reward
seed 388 passed
get reward
seed 389 passed
get reward
seed 390 passed
get reward
seed 391 passed
get reward
seed 392 passed
get reward
seed 393 passed
get reward
seed 394 passed
get reward
seed 395 passed
get reward
seed 396 passed
get reward
seed 397 passed
get reward
seed 398 passed
get reward
seed 399 passed
get reward
seed 400 passed
get reward
seed 401 passed
get reward
seed 402 passed
get reward
seed 403 passed
get reward
seed 404 passed
get reward
seed 405 passed
get reward
seed 406 passed
get reward
seed 407 passed
get reward
seed 408 passed
get reward
seed 409 passed
get reward
seed 410 passed
get reward
seed 411 passed
get reward
seed 412 passed
get reward
seed 413 passed
get reward
seed 414 passed
get reward
seed 415 passed
get reward
seed 416 passed
get reward
seed 417 passed
get reward
seed 418 passed
get reward
seed 419 passed
get reward
seed 420 passed
get reward
seed 421 passed
get reward
seed 422 passed
get reward
seed 423 passed
get reward
seed 424 passed
get reward
seed 425 passed
get reward
seed 426 passed
get reward
seed 427 passed
get reward
seed 428 passed
get reward
seed 429 passed
get reward
seed 430 passed
get reward
seed 431 passed
get reward
seed 432 passed
get reward
seed 433 passed
get reward
seed 434 passed
get reward
seed 435 passed
get reward
seed 436 passed
get reward
seed 437 passed
get reward
seed 438 passed
get reward
seed 439 passed
get reward
seed 440 passed
get reward
seed 441 passed
get reward
seed 442 passed
get reward
seed 443 passed
get reward
seed 444 passed
get reward
seed 445 passed
get reward
seed 446 passed
get reward
seed 447 passed
get reward
seed 448 passed
get reward
seed 449 passed
get reward
seed 450 passed
get reward
seed 451 passed
get reward
seed 452 passed
get reward
seed 453 passed
get reward
seed 454 passed
get reward
seed 455 passed
get reward
seed 456 passed
get reward
seed 457 passed
get reward
seed 458 passed
get reward
seed 459 passed
get reward
seed 460 passed
get reward
seed 461 passed
get reward
seed 462 passed
get reward
seed 463 passed
get reward
seed 464 passed
get reward
seed 465 passed
get reward
seed 466 passed
get reward
seed 467 passed
get reward
seed 468 passed
get reward
seed 469 passed
get reward
seed 470 passed
get reward
seed 471 passed
get reward
seed 472 passed
get reward
seed 473 passed
get reward
seed 474 passed
get reward
seed 475 passed
get reward
seed 476 passed
get reward
seed 477 passed
get reward
seed 478 passed
get reward
seed 479 passed
get reward
seed 480 passed
get reward
seed 481 passed
get reward
seed 482 passed
get reward
seed 483 passed
get reward
seed 484 passed
get reward
seed 485 passed
get reward
seed 486 passed
get reward
seed 487 passed
get reward
seed 488 passed
get reward
seed 489 passed
get reward
seed 490 passed
get reward
seed 491 passed
get reward
seed 492 passed
get reward
seed 493 passed
get reward
seed 494 passed
get reward
seed 495 passed
get reward
seed 496 passed
get reward
seed 497 passed
get reward
seed 498 passed
get reward
seed 499 passed
get reward
seed 500 passed
get reward
seed 501 passed
get reward
seed 502 passed
get reward
seed 503 passed
get reward
seed 504 passed
get reward
seed 505 passed
get reward
seed 506 passed
get reward
seed 507 passed
get reward
seed 508 passed
get reward
seed 509 passed
get reward
seed 510 passed
get reward
seed 511 passed
get reward
seed 512 passed
get reward
seed 513 passed
get reward
seed 514 passed
get reward
seed 515 passed
get reward
seed 516 passed
get reward
seed 517 passed
get reward
seed 518 passed
get reward
seed 519 passed
get reward
seed 520 passed
get reward
seed 521 passed
get reward
seed 522 passed
get reward
seed 523 passed
get reward
seed 524 passed
get reward
seed 525 passed
get reward
seed 526 passed
get reward
seed 527 passed
get reward
seed 528 passed
get reward
seed 529 passed
get reward
seed 530 passed
get reward
seed 531 passed
get reward
seed 532 passed
get reward
seed 533 passed
get reward
seed 534 passed
get reward
seed 535 passed
get reward
seed 536 passed
get reward
seed 537 passed
get reward
seed 538 passed
get reward
seed 539 passed
get reward
seed 540 passed
get reward
seed 541 passed
get reward
seed 542 passed
get reward
seed 543 passed
get reward
seed 544 passed
get reward
seed 545 passed
get reward
seed 546 passed
get reward
seed 547 passed
get reward
seed 548 passed
get reward
seed 549 passed
get reward
seed 550 passed
get reward
seed 551 passed
get reward
seed 552 passed
get reward
seed 553 passed
get reward
seed 554 passed
get reward
seed 555 passed
get reward
seed 556 passed
get reward
seed 557 passed
get reward
seed 558 passed
get reward
seed 559 passed
get reward
seed 560 passed
get reward
seed 561 passed
get reward
seed 562 passed
get reward
seed 563 passed
get reward
seed 564 passed
get reward
seed 565 passed
get reward
seed 566 passed
get reward
seed 567 passed
get reward
seed 568 passed
get reward
seed 569 passed
get reward
seed 570 passed
get reward
seed 571 passed
get reward
seed 572 passed
get reward
seed 573 passed
get reward
seed 574 passed
get reward
seed 575 passed
get reward
seed 576 passed
get reward
seed 577 passed
get reward
seed 578 passed
get reward
seed 579 passed
get reward
seed 580 passed
get reward
seed 581 passed
get reward
seed 582 passed
get reward
seed 583 passed
get reward
seed 584 passed
get reward
seed 585 passed
get reward
seed 586 passed
get reward
seed 587 passed
get reward
seed 588 passed
get reward
seed 589 passed
get reward
seed 590 passed
get reward
seed 591 passed
get reward
seed 592 passed
get reward
seed 593 passed
get reward
seed 594 passed
get reward
seed 595 passed
get reward
seed 596 passed
get reward
seed 597 passed
get reward
seed 598 passed
get reward
seed 599 passed
get reward
seed 600 passed
get reward
seed 601 passed
get reward
seed 602 passed
get reward
seed 603 passed
get reward
seed 604 passed
get reward
seed 605 passed
get reward
seed 606 passed
get reward
seed 607 passed
get reward
seed 608 passed
get reward
seed 609 passed
get reward
seed 610 passed
get reward
seed 611 passed
get reward
seed 612 passed
get reward
seed 613 passed
get reward
seed 614 passed
get reward
seed 615 passed
get reward
seed 616 passed
get reward
seed 617 passed
get reward
seed 618 passed
get reward
seed 619 passed
get reward
seed 620 passed
get reward
seed 621 passed
get reward
seed 622 passed
get reward
seed 623 passed
get reward
seed 624 passed
get reward
seed 625 passed
get reward
seed 626 passed
get reward
seed 627 passed
get reward
seed 628 passed
get reward
seed 629 passed
get reward
seed 630 passed
get reward
seed 631 passed
get reward
seed 632 passed
get reward
seed 633 passed
get reward
seed 634 passed
get reward
seed 635 passed
get reward
seed 636 passed
get reward
seed 637 passed
get reward
seed 638 passed
get reward
seed 639 passed
get reward
seed 640 passed
get reward
seed 641 passed
get reward
seed 642 passed
get reward
seed 643 passed
get reward
seed 644 passed
get reward
seed 645 passed
get reward
seed 646 passed
get reward
seed 647 passed
get reward
seed 648 passed
get reward
seed 649 passed
get reward
seed 650 passed
get reward
seed 651 passed
get reward
seed 652 passed
get reward
seed 653 passed
get reward
seed 654 passed
get reward
seed 655 passed
get reward
seed 656 passed
get reward
seed 657 passed
get reward
seed 658 passed
get reward
seed 659 passed
get reward
seed 660 passed
get reward
seed 661 passed
get reward
seed 662 passed
get reward
seed 663 passed
get reward
seed 664 passed
get reward
seed 665 passed
get reward
seed 666 passed
get reward
seed 667 passed
get reward
seed 668 passed
get reward
seed 669 passed
get reward
seed 670 passed
get reward
seed 671 passed
get reward
seed 672 passed
get reward
seed 673 passed
get reward
seed 674 passed
get reward
seed 675 passed
get reward
seed 676 passed
get reward
seed 677 passed
get reward
seed 678 passed
get reward
seed 679 passed
get reward
seed 680 passed
get reward
seed 681 passed
get reward
seed 682 passed
get reward
seed 683 passed
get reward
seed 684 passed
get reward
seed 685 passed
get reward
seed 686 passed
get reward
seed 687 passed
get reward
seed 688 passed
get reward
seed 689 passed
get reward
seed 690 passed
get reward
seed 691 passed
get reward
seed 692 passed
get reward
seed 693 passed
get reward
seed 694 passed
get reward
seed 695 passed
get reward
seed 696 passed
get reward
seed 697 passed
get reward
seed 698 passed
get reward
seed 699 passed
get reward
seed 700 passed
get reward
seed 701 passed
get reward
seed 702 passed
get reward
seed 703 passed
get reward
seed 704 passed
get reward
seed 705 passed
get reward
seed 706 passed
get reward
seed 707 passed
get reward
seed 708 passed
get reward
seed 709 passed
get reward
seed 710 passed
get reward
seed 711 passed
get reward
seed 712 passed
get reward
seed 713 passed
get reward
seed 714 passed
get reward
seed 715 passed
get reward
seed 716 passed
get reward
seed 717 passed
get reward
seed 718 passed
get reward
seed 719 passed
get reward
seed 720 passed
get reward
seed 721 passed
get reward
seed 722 passed
get reward
seed 723 passed
get reward
seed 724 passed
get reward
seed 725 passed
get reward
seed 726 passed
get reward
seed 727 passed
get reward
seed 728 passed
get reward
seed 729 passed
get reward
seed 730 passed
get reward
seed 731 passed
get reward
seed 732 passed
get reward
seed 733 passed
get reward
seed 734 passed
get reward
seed 735 passed
get reward
seed 736 passed
get reward
seed 737 passed
get reward
seed 738 passed
get reward
seed 739 passed
get reward
seed 740 passed
get reward
seed 741 passed
get reward
seed 742 passed
get reward
seed 743 passed
get reward
seed 744 passed
get reward
seed 745 passed
get reward
seed 746 passed
get reward
seed 747 passed
get reward
seed 748 passed
get reward
seed 749 passed
get reward
seed 750 passed
get reward
seed 751 passed
get reward
seed 752 passed
get reward
seed 753 passed
get reward
seed 754 passed
get reward
seed 755 passed
get reward
seed 756 passed
get reward
seed 757 passed
get reward
seed 758 passed
get reward
seed 759 passed
get reward
seed 760 passed
get reward
seed 761 passed
get reward
seed 762 passed
get reward
seed 763 passed
get reward
seed 764 passed
get reward
seed 765 passed
get reward
seed 766 passed
get reward
seed 767 passed
get reward
seed 768 passed
get reward
seed 769 passed
get reward
seed 770 passed
get reward
seed 771 passed
get reward
seed 772 passed
get reward
seed 773 passed
get reward
seed 774 passed
get reward
seed 775 passed
get reward
seed 776 passed
get reward
seed 777 passed
get reward
seed 778 passed
get reward
seed 779 passed
get reward
seed 780 passed
get reward
seed 781 passed
get reward
seed 782 passed
get reward
seed 783 passed
get reward
seed 784 passed
get reward
seed 785 passed
get reward
seed 786 passed
get reward
seed 787 passed
get reward
seed 788 passed
get reward
seed 789 passed
get reward
seed 790 passed
get reward
seed 791 passed
get reward
seed 792 passed
get reward
seed 793 passed
get reward
seed 794 passed
get reward
seed 795 passed
get reward
seed 796 passed
get reward
seed 797 passed
get reward
seed 798 passed
get reward
seed 799 passed
get reward
seed 800 passed
get reward
seed 801 passed
get reward
seed 802 passed
get reward
seed 803 passed
get reward
seed 804 passed
get reward
seed 805 passed
get reward
seed 806 passed
get reward
seed 807 passed
get reward
seed 808 passed
get reward
seed 809 passed
get reward
seed 810 passed
get reward
seed 811 passed
get reward
seed 812 passed
get reward
seed 813 passed
get reward
seed 814 passed
get reward
seed 815 passed
get reward
seed 816 passed
get reward
seed 817 passed
get reward
seed 818 passed
get reward
seed 819 passed
get reward
seed 820 passed
get reward
seed 821 passed
get reward
seed 822 passed
get reward
seed 823 passed
get reward
seed 824 passed
get reward
seed 825 passed
get reward
seed 826 passed
get reward
seed 827 passed
get reward
seed 828 passed
get reward
seed 829 passed
get reward
seed 830 passed
get reward
seed 831 passed
get reward
seed 832 passed
get reward
seed 833 passed
get reward
seed 834 passed
get reward
seed 835 passed
get reward
seed 836 passed
get reward
seed 837 passed
get reward
seed 838 passed
get reward
seed 839 passed
get reward
seed 840 passed
get reward
seed 841 passed
get reward
seed 842 passed
get reward
seed 843 passed
get reward
seed 844 passed
get reward
seed 845 passed
get reward
seed 846 passed
get reward
seed 847 passed
get reward
seed 848 passed
get reward
seed 849 passed
get reward
seed 850 passed
get reward
seed 851 passed
get reward
seed 852 passed
get reward
seed 853 passed
get reward
seed 854 passed
get reward
seed 855 passed
get reward
seed 856 passed
get reward
seed 857 passed
get reward
seed 858 passed
get reward
seed 859 passed
get reward
seed 860 passed
get reward
seed 861 passed
get reward
seed 862 passed
get reward
seed 863 passed
get reward
seed 864 passed
get reward
seed 865 passed
get reward
seed 866 passed
get reward
seed 867 passed
get reward
seed 868 passed
get reward
seed 869 passed
get reward
seed 870 passed
get reward
seed 871 passed
get reward
seed 872 passed
get reward
seed 873 passed
get reward
seed 874 passed
get reward
seed 875 passed
get reward
seed 876 passed
get reward
seed 877 passed
get reward
seed 878 passed
get reward
seed 879 passed
get reward
seed 880 passed
get reward
seed 881 passed
get reward
seed 882 passed
get reward
seed 883 passed
get reward
seed 884 passed
get reward
seed 885 passed
get reward
seed 886 passed
get reward
seed 887 passed
get reward
seed 888 passed
get reward
seed 889 passed
get reward
seed 890 passed
get reward
seed 891 passed
get reward
seed 892 passed
get reward
seed 893 passed
get reward
seed 894 passed
get reward
seed 895 passed
get reward
seed 896 passed
get reward
seed 897 passed
get reward
seed 898 passed
get reward
seed 899 passed
get reward
seed 900 passed
get reward
seed 901 passed
get reward
seed 902 passed
get reward
seed 903 passed
get reward
seed 904 passed
get reward
seed 905 passed
get reward
seed 906 passed
get reward
seed 907 passed
get reward
seed 908 passed
get reward
seed 909 passed
get reward
seed 910 passed
get reward
seed 911 passed
get reward
seed 912 passed
get reward
seed 913 passed
get reward
seed 914 passed
get reward
seed 915 passed
get reward
seed 916 passed
get reward
seed 917 passed
get reward
seed 918 passed
get reward
seed 919 passed
get reward
seed 920 passed
get reward
seed 921 passed
get reward
seed 922 passed
get reward
seed 923 passed
get reward
seed 924 passed
get reward
seed 925 passed
get reward
seed 926 passed
get reward
seed 927 passed
get reward
seed 928 passed
get reward
seed 929 passed
get reward
seed 930 passed
get reward
seed 931 passed
get reward
seed 932 passed
get reward
seed 933 passed
get reward
seed 934 passed
get reward
seed 935 passed
get reward
seed 936 passed
get reward
seed 937 passed
get reward
seed 938 passed
get reward
seed 939 passed
get reward
seed 940 passed
get reward
seed 941 passed
get reward
seed 942 passed
get reward
seed 943 passed
get reward
seed 944 passed
get reward
seed 945 passed
get reward
seed 946 passed
get reward
seed 947 passed
get reward
seed 948 passed
get reward
seed 949 passed
get reward
seed 950 passed
get reward
seed 951 passed
get reward
seed 952 passed
get reward
seed 953 passed
get reward
seed 954 passed
get reward
seed 955 passed
get reward
seed 956 passed
get reward
seed 957 passed
get reward
seed 958 passed
get reward
seed 959 passed
get reward
seed 960 passed
get reward
seed 961 passed
get reward
seed 962 passed
get reward
seed 963 passed
get reward
seed 964 passed
get reward
seed 965 passed
get reward
seed 966 passed
get reward
seed 967 passed
get reward
seed 968 passed
get reward
seed 969 passed
get reward
seed 970 passed
get reward
seed 971 passed
get reward
seed 972 passed
get reward
seed 973 passed
get reward
seed 974 passed
get reward
seed 975 passed
get reward
seed 976 passed
get reward
seed 977 passed
get reward
seed 978 passed
get reward
seed 979 passed
get reward
seed 980 passed
get reward
seed 981 passed
get reward
seed 982 passed
get reward
seed 983 passed
get reward
seed 984 passed
get reward
seed 985 passed
get reward
seed 986 passed
get reward
seed 987 passed
get reward
seed 988 passed
get reward
seed 989 passed
get reward
seed 990 passed
get reward
seed 991 passed
get reward
seed 992 passed
get reward
seed 993 passed
get reward
seed 994 passed
get reward
seed 995 passed
get reward
seed 996 passed
get reward
seed 997 passed
get reward
seed 998 passed
get reward
seed 999 passed

success and store for 
  put_near WHILE(not (front_is_ball)) { turn_left} ; pickup C[1, infty] ; END (False)
setting DSL for next environment
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
get reward
